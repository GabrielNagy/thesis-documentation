# Local IspellDict: english
#+STARTUP: showeverything
#+REVEAL_TRANS: slide
#+REVEAL_THEME: blood
#+OPTIONS: num:nil toc:nil
#+REVEAL_PLUGINS: (highlight notes)
#+REVEAL_HIGHLIGHT_CSS: data/darcula.css
#+REVEAL_HLEVEL: 2
#+TITLE: Continuous Integration with Buildbot
#+AUTHOR: Gabriel Nagy
#+DATE: <2018-06-23 Sb>
#+EMAIL: gabrielnagy@me.com

* Continuous Integration with Buildbot
{{{author}}}

* 
  *Continuous Integration* - the process of automating
the build and testing of code every time a team member commits changes
to version control

  *Buildbot* - CI tool written in Python, published under the GPL license
* Scope of this thesis
Implement new custom features and shed light on Buildbot's capabilities as a CI tool

** Why use Buildbot?
   More well-known and widely-used alternatives:
   #+ATTR_REVEAL: :frag appear
   - *Jenkins* \rightarrow open-source, written in Java
   - *Travis* \rightarrow free for public GitHub projects, offers paid plans
   - *CircleCI* \rightarrow 1,500 build minutes per month for free, offers paid plans
     #+BEGIN_NOTES
     speak about how at work Jenkins is used because of projects using C++ all following the same patterns
     #+END_NOTES
** What's the catch?
   - most of the aforementioned tools come ready-to-use
   - the fundamental design is fixed and limited by the authors
   - for users with simple demands, the fundamental design fits
   #+ATTR_REVEAL: :frag appear
   - for everyone else ([[https://build.webkit.org/][WebKit]], [[https://build.chromium.org/buildbot][Chromium]], [[https://ci.apache.org/waterfall?&show=bb-openbsd&show=svn-windows-local&show=svn-windows-ra&show=svn-trunk-rat-report&show=svn-x64-centos-gcc&show=svn-x64-ubuntu-gcc&show=svn-backport-conflicts-1.7.x&show=svn-backport-conflicts-1.8.x&show=svn-warnings&show_events=true&][Subversion]]), there's *Buildbot*
   #+BEGIN_NOTES
   - tools such as Jenkins come ready-to-use with functionalities limited to the ones envisioned by the authors
   - this arrangement suits common use-cases well: building and testing Java projects, Ruby gems, etc.
   - not well suited to more particular cases, like mixed-language projects or complex release tasks
   - speak about well-known projects using Buildbot: WebKit, Chromium, Mozilla Firefox/Thunderbird/SeaMonkey (over 700 build and test workers)
   #+END_NOTES
** What makes Buildbot appealing?
   - batteries-included
     - lightweight and easily extensible
     - add builders and test scenarios in just a few lines of code
   - simplicity of Python
     - easy to debug
     - friendly syntax
* Technologies used
** 
  - *Python*
    - created by Guido van Rossum and released in 1991
    - used in about everything as of 2018
    - 91.1% of Buildbot's codebase
  - *Angular*
    - maintained by smart guys at Google
    - used to write single-page web applications
    - extensively used by Buildbot for the front-end
  #+BEGIN_NOTES
  - we use Python in all of our backend custom implementations & to develop a static dashboard using Flask
  - we use Angular to develop a custom dynamic dashboard using AJAX principles
    - + CoffeeScript - a superset of JavaScript, making it more pythonic (to avoid scaring away backend developers)
    - + pug - minimalist template engine, decrease redundancy of writing HTML code
    - + node - server-side JavaScript
  #+END_NOTES 


* Concepts
** 
#+REVEAL_HTML: <img class="stretch" src="img/buildbot_overview.png">
#+BEGIN_NOTES
- build - a single build/test run, on a specific source code revision; it consists of a series of steps described by the build factory
- buildset - a set of builds triggered one time
- buildrequest - a query for building on a single builder; prioritized from oldest to newest
- builder - a queue for a certain type of build; they run independently, optional properties may cause them to interleave with each other
- scheduler - responsible for deciding when builds should run, managed through the configuration file
#+END_NOTES

* Custom implementations
** Backend componentization
- by default, all configuration is stored in the =master.cfg= file
- hard to organize
- we split the file into different modules
*** 
   #+REVEAL_HTML: <img class="stretch" src="img/componentization.png">

#+BEGIN_NOTES
The figure below illustrates this componentization for the Nokia Buildbot
project, which has 4 projects running on the same master,
each of them having an arbitrary number of builders
subfolder) and a specific web dashboard.

Some of the build steps have log outputs that do not match Buildbot's
default parsers, so custom log parsers have been implemented.

Custom notifiers have the purpose of informing the user/admin about
vital build or system information, the current implemented one uses
LDAP to query the active directory in order to find the e-mail address
of an user.

As the project increases in size, metrics become necessary. We use
Prometheus to keep track of information, and Grafana to crunch it
and present it in an user-friendly way.

All of these components could be worked into the master.cfg
file, but the result would be an approx. 2300 line configuration file
that encompasses each category, making code modifications and additions
more prone to errors and most certainly a chore to go through.
#+END_NOTES

** Triggering builds manually
   - auto build trigger:
     - =SingleBranchScheduler= - poll repository and auto build changes
   - manual build trigger:
     #+ATTR_REVEAL: :frag (grow none)
     - =Try_Userpass= - send changes manually (i.e. command line)
     - =ForceScheduler= - button on the web interface

#+BEGIN_NOTES
By default, Buildbot polls repositories and automatically builds new commits.
Developers at Nokia needed a way to test their code without committing to trunk and risk breaking it.
I devised a way for them to manually send changes to Buildbot for testing. For that I used the Try_Userpass scheduler.
#+END_NOTES

*** Solution
    - python ~try~ script for user
    - auto collect diff and user information
    - send information to buildbot

*** Use case
    - *Use case summary:* User manually (without committing and pushing) sends his diff to buildbot for testing
    - *Prerequisites:* User is in the repository root
    - *Triggers:* User executes ~try~ command
    - *Expected result:* Diff and user info sent to buildbot for testing
** Email lookup using LDAP
   - *Use case summary:* The developer wants to trigger a manual build with his recent code changes and receive the results by email.
   - *Prerequisites:* The developer, in his changed repository, executes a command to send the changes to Buildbot.
   - *Expected result:* The developer receives an email with the build results.

#+BEGIN_NOTES
- valid just for manual (try) builds as auto builds get the email address from the commit message
- another way for the developer to see his results besides going to the Buildbot page
#+END_NOTES

*** Query the AD for the email address using the user's CSL (corporate short login)
   #+REVEAL_HTML: <img class="stretch" src="img/ldapsearch.png">

*** Sample email
   #+REVEAL_HTML: <img class="stretch" src="img/sample_mail.png">

*** Behind the scenes
   #+REVEAL_HTML: <img class="stretch" src="img/sample_mail_log.png">

** Custom log parsing
   - *Use case summary:* Summarize the failed/succeeded tests in a command
   - *Prerequisites:* The builder runs a build/test command
   - *Expected result:* Buildbot analyzes the logs and updates the build status accordingly

#+BEGIN_NOTES
- by default, Buildbot provides a number of parsers for commonly used build commands such as make
- for other outputs custom parsers can be implemented
- for ShellCommands, buildbot uses the return code to mark the step as passed or failed
- in some cases, we had test commands which always exited with 0 even in case of failure
#+END_NOTES

*** Log output to analyze
#+BEGIN_EXAMPLE
--------------------------------------
Ran 3 tests in 0.035s
FAILED (failures=1, successes=2)
#+END_EXAMPLE
- we implement a custom =ShellCommand=
- using regex, we classify the successes and failures

#+BEGIN_NOTES
- Trial command output (twisted test suite)
- we parse the output, counting the number of failed/passed tests
#+END_NOTES

*** Code snippets - =trial.py=
#+BEGIN_SRC python
class Trial(shell.ShellCommand):
    def gatherTestStatistics(self, line):
        m = re.search('failures=(\d+)', line)
        if m:
            self.failures = m.group(1)
        m = re.search(r'successes=(\d+)', line)
        if m:
            self.successes = m.group(1)
#+END_SRC

*** Results
   #+REVEAL_HTML: <img class="stretch" src="img/log_parser.png">

#+BEGIN_NOTES
- buildbot automatically updated the build summary with the number of passed/failed tests
#+END_NOTES

** Custom dashboards
   - can be written in
     - Flask (Python framework for web apps)
       - simpler implementation
     - Angular (framework used by the Buildbot frontend)
       - implementation is more difficult

*** Flask Dashboards
    - easier to implement, with some caveats
    #+ATTR_REVEAL: :frag appear
      - not updating automatically on new builds
      - page needs to be manually reloaded

*** 
    #+REVEAL_HTML: <img class="stretch" src="img/dashboard_info.png">

*** Result
    #+REVEAL_HTML: <video class="stretch" autoplay loop><source data-src="./img/flask_run.webm" type="video/webm" /></video>

*** Angular Dashboards
    - difficult to implement (different knowledgebase required)
    - need MVC and Angular knowledge
    - more rewarding and efficient

*** Result
    #+REVEAL_HTML: <video class="stretch" autoplay loop><source data-src="./img/angular_run.webm" type="video/webm" /></video>

** Capturing metrics
   - export to Prometheus
   - visualize the data with Grafana

#+BEGIN_NOTES
- now that we have a fully working buildbot installation, we might want to monitor it and see some statistics regarding the installation
and the machine on which buildbot runs
- to collect metrics we use Prometheus, an open-source monitoring system
- then we export said metrics to Grafana, a more eye-candy visualizing tool
#+END_NOTES


*** Buildbot Dashboard
    #+REVEAL_HTML: <img class="stretch" src="img/buildbot_grafana.png">

#+BEGIN_NOTES
- buildbot master dashboard
- tables for workers and builders
- with some tinkering inside Grafana we can make the names inside the columns clickable, sending us to the buildbot page for the specific workers/builders
#+END_NOTES

*** System Dashboard
    #+REVEAL_HTML: <img class="stretch" src="img/node_exporter_grafana.png">

#+BEGIN_NOTES
- system dashboard
- see some vital information such as memory, disk usage, cpu load/idle and data transfer
#+END_NOTES

* Conclusion
  #+ATTR_REVEAL: :frag (appear)
  - for users with simple needs, other CI tools may be more suitable
  - more complex demands: *buildbot*
  - buildbot *CAN* do it, you just need to tell it *HOW*

#+BEGIN_NOTES
- the principle on which buildbot bases itself on is simplicity
- buildbot has the required capabilities, you need to know the tools to implement them
#+END_NOTES

* Questions
  Presentation developed with =emacs=, =org-mode= and =reveal.js=. Deployed on GitLab.
  Buildbot created by Brian Warner.
